% This file contains the optimization problem
clear all
clc

% set parameters
numFacilities = 2;
numNodes = 5;       % number of nodes on the network
numRoutes = 2;      % number of candidate routes

% load b_qh, a_hp, flow
load('./result/b_qh');
load('./result/a_hp');
load('generated_flows_all.mat');
b_qh = b_qh_all;
a_hp = a_hp_all;

% compute numFlows
numFlows = size(b_qh,1);

Q = numFlows;
P = numNodes + numRoutes;
H = size(b_qh, 2);

% assign variables into opt
% f, A, b, Aeq, beq

% first constraint: with b_qh
Q_1 = eye(Q, Q);
P_1 = zeros(Q, P);
H_1 = -b_qh;
A_1 = [Q_1 P_1 H_1];
b_1 = zeros(Q, 1);
keyboard
% second constraint: with a_hp
P_2 = [];

for h = 1 : H
    a_row = -a_hp(h,:);
    a_unit = diag(a_row);
    P_2 = [P_2; a_unit];
end
% remove rows with all zeros
P_2(all(P_2==0,2),:) = [];
% keyboard
% P_2 = [];
% for h = 1 : H
%     indices = find(a_hp(h,:) == 1);
%     a_row = -a_hp(h,indices);
%     a_unit = dia(a_row);
% end






    
h_unit = eye(H,H);
H_2 = kron(h_unit, ones(P,1));

Q_2 = zeros(H*P,Q);

A_2 = [Q_2 P_2 H_2];
b_2 = zeros(H*P, 1);

% form inequality constraint
A = [A_1; A_2];
b = [b_1; b_2];

% third constraint: number of facilities
Q_3 = zeros(1, Q);
P_3 = ones(1, P);
H_3 = zeros(1, H);
Aeq = [Q_3 P_3 H_3];
beq = numFacilities;

% objective function
Q_4 = flows(:,2);
P_4 = zeros(P,1);
H_4 = zeros(H,1);
f = -[Q_4; P_4; H_4];

keyboard
[x, fval] = bintprog(f,A,b,Aeq,beq);
